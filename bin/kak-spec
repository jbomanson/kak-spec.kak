#! /bin/sh

root_dir="$( ( cd "${0%/*}/.."; pwd ) )"

KAK_SPEC_PRELUDE_SH="$(cat "$root_dir/lib/prelude.sh")"
export KAK_SPEC_PRELUDE_SH
eval "$KAK_SPEC_PRELUDE_SH"

KAK_SPEC_SEND_MESSAGE="$(cat "$root_dir/lib/send_message.sh")"
export KAK_SPEC_SEND_MESSAGE

REPORTER="$root_dir/lib/reporter"

scratch_dir=$(mktemp -d "${TMPDIR:-/tmp}/kak-spec.XXXXXXXX")

clean_up () {
    code=$?
    rm -r "$scratch_dir"
    exit $code
}

trap clean_up EXIT

KAK_SPEC_DIR="$scratch_dir"
export KAK_SPEC_DIR

mkfifo "$KAK_SPEC_DIR/fifo"

if ! test -x "$REPORTER" >/dev/null; then
    echo "${0##*/}: missing executable \"$REPORTER\"";
    exit 1;
fi >&2

# Listen to the fifo.
"$REPORTER" "$KAK_SPEC_DIR/fifo" &
translator_pid=$!

# Keep the fifo open.
sleep 100000d >"$KAK_SPEC_DIR/fifo" 2>&1 </dev/null &
fifo_holder_pid=$!

{
    kak_quote try "
        source $(kak_quote "$root_dir/rc/spec.kak")
        source $(kak_quote "$root_dir/rc/scratch-commands.kak")
        buffer '*debug*'
        require-module spec
    " catch "
        quit! 1
    "
    kak_quote try "
        $(
            for argument
            do
                kak_quote try "$(kak_quote spec-source "$argument")"
            done
        )
    "
    kak_quote spec-quit-begin
} >"$KAK_SPEC_DIR/source.kak"

kak -ui dummy -n -e 'source %sh(printf "%s" "$KAK_SPEC_DIR/source.kak")'
kak_status=$?

# The translator should have quit by now unless something went wrong.
kill "$translator_pid" >/dev/null 2>&1
wait "$translator_pid"

if test "$fifo_holder_pid" -gt 0; then
    kill "$fifo_holder_pid"
fi

exit "$kak_status"
