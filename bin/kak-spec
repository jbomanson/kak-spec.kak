#! /bin/sh

root_dir="$( ( cd "${0%/*}/.."; pwd ) )"

KAK_SPEC_PROGRAM="$0"
export KAK_SPEC_PROGRAM

KAK_SPEC_PRELUDE_SH="$(cat "$root_dir/lib/prelude.sh")"
export KAK_SPEC_PRELUDE_SH
eval "$KAK_SPEC_PRELUDE_SH"

KAK_SPEC_SEND_MESSAGE="$(cat "$root_dir/lib/send_message.sh")"
export KAK_SPEC_SEND_MESSAGE

REPORTER="$root_dir/lib/reporter"

scratch_dir=$(mktemp -d "${TMPDIR:-/tmp}/kak-spec.XXXXXXXX")

clean_up () {
    code=$?
    rm -r "$scratch_dir"
    exit $code
}

trap clean_up EXIT

KAK_SPEC_DIR="$scratch_dir"
export KAK_SPEC_DIR

#
#       Parse Command Line Arguments
#

usage ()
{
    echo "Usage:"
    echo "  kak-spec [<option>...] <test-source-file.kak>..."
    echo
    echo "where <option> is one of"
    echo "  -eval=<regex>    -- Run only assertions whose -eval  argument matches <regex>"
    echo "  -title=<regex>   -- Run only assertions whose -title argument matches <regex>"
    echo "  -input=<regex>   -- Run only assertions whose -input argument matches <regex>"
}


while true
do
    argument="$1"
    case "$argument" in
    --?*)
        # Normalize double dashes into single dashes and try again.
        shift
        set -- "${argument#-}" "$@"
        ;;
    -*=*)
        # Normalize assignment style arguments into pairs of arguments.
        shift
        set -- "${argument%%=*}" "${argument#*=}" "$@"
        ;;
    -eval | -input | -title)
        # Take these options as environment variable switches.
        eval "export KAK_SPEC_option_${argument#-}=\"\$2\""
        shift 2
        ;;
    -h | -help | help)
        usage
        exit
        ;;
    -*)
        {
            echo "$0: Unknown argument '$argument'"
            echo
            usage
        } >&2
        exit 1
        ;;
    *)
        break
        ;;
    esac
done

#
#       Act
#

if ! test -x "$REPORTER" >/dev/null; then
    echo "${0##*/}: missing executable \"$REPORTER\"";
    exit 1;
fi >&2

# Listen to the fifo.
mkfifo "$KAK_SPEC_DIR/fifo"
"$REPORTER" "$KAK_SPEC_DIR/fifo" &
translator_pid=$!

# Keep the fifo open.
sleep 100000d >"$KAK_SPEC_DIR/fifo" 2>&1 </dev/null &
fifo_holder_pid=$!

{
    kak_quote try "
        source $(kak_quote "$root_dir/rc/spec.kak")
        source $(kak_quote "$root_dir/rc/spec-scratch-eval.kak")
        buffer '*debug*'
        require-module spec
    " catch "
        quit! 1
    "
    kak_quote try "
        $(
            for argument
            do
                kak_quote try "$(kak_quote spec-source "$argument")"
            done
        )
    "
    kak_quote spec-quit-begin
} >"$KAK_SPEC_DIR/source.kak"

kak -ui dummy -n -e 'source %sh(printf "%s" "$KAK_SPEC_DIR/source.kak")'
kak_status=$?

# The translator should have quit by now unless something went wrong.
kill "$translator_pid" >/dev/null 2>&1
wait "$translator_pid"

if test "$fifo_holder_pid" -gt 0; then
    kill "$fifo_holder_pid"
fi

exit "$kak_status"
