#! /bin/sh

root_dir="$( ( cd "${0%/*}/.."; pwd ) )"

SCRATCH_UNIT_TEST_PRELUDE_SH="$(cat "$root_dir/lib/prelude.sh")"
export SCRATCH_UNIT_TEST_PRELUDE_SH
eval "$SCRATCH_UNIT_TEST_PRELUDE_SH"

SCRATCH_UNIT_TEST_SEND_MESSAGE="$(cat "$root_dir/lib/send_message.sh")"
export SCRATCH_UNIT_TEST_SEND_MESSAGE

TRANSLATOR="$root_dir/lib/scratch_unit_test_translate"

scratch_dir=$(mktemp -d "${TMPDIR:-/tmp}/scratch-unit-test-kak.XXXXXXXX")

clean_up () {
    code=$?
    rm -r "$scratch_dir"
    exit $code
}

trap clean_up EXIT

SCRATCH_UNIT_TEST_DIR="$scratch_dir"
export SCRATCH_UNIT_TEST_DIR

mkfifo "$SCRATCH_UNIT_TEST_DIR/fifo"

if ! test -x "$TRANSLATOR" >/dev/null; then
    echo "${0##*/}: missing executable \"$TRANSLATOR\"";
    exit 1;
fi >&2

# Listen to the fifo.
"$TRANSLATOR" "$SCRATCH_UNIT_TEST_DIR/fifo" &
translator_pid=$!

# Keep the fifo open.
sleep 100000d >"$SCRATCH_UNIT_TEST_DIR/fifo" 2>&1 </dev/null &
fifo_holder_pid=$!

{
    kak_quote try "
        source $(kak_quote "$root_dir/rc/scratch-unit-test.kak")
        source $(kak_quote "$root_dir/rc/scratch-commands.kak")
        buffer '*debug*'
        require-module scratch-unit-test
    " catch "
        quit! 1
    "
    kak_quote try "
        $(
            for argument
            do
                kak_quote try "$(kak_quote scratch-unit-test-source "$argument")"
            done
        )
    "
    kak_quote scratch-unit-test-quit-begin
} >"$SCRATCH_UNIT_TEST_DIR/source.kak"

kak -ui dummy -n -e 'source %sh(printf "%s" "$SCRATCH_UNIT_TEST_DIR/source.kak")'
kak_status=$?

# The translator should have quit by now unless something went wrong.
kill "$translator_pid" >/dev/null 2>&1
wait "$translator_pid"

if test "$fifo_holder_pid" -gt 0; then
    kill "$fifo_holder_pid"
fi

if test -r "$SCRATCH_UNIT_TEST_DIR/debug"; then
    cat "$SCRATCH_UNIT_TEST_DIR/debug"
fi

exit "$kak_status"
