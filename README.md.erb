# kak-spec

[![License](https://img.shields.io/github/license/jbomanson/kak-spec)](https://opensource.org/licenses/Apache-2.0)

**kak-spec** is a unit test framework for
[Kakoune](https://github.com/mawww/kakoune) scripts and plugins.
The framework is designed to help plugin developers, but it can also be useful for studying the
behavior of the kakoune scripting language.
Using **kak-spec** is a matter of
- installing **kak-spec**
- writing unit tests in kakoune script using the provided **spec** module, and
- running the tests form the command line using **kak-spec**.

## Dependencies

- ruby

- [prelude.kak](https://github.com/alexherbo2/prelude.kak)

## Installation of kak-spec and the prelude.kak dependency

The following alternative steps will install a `kak-spec` executable under
`/path/to/prefix/directory/bin`, and man pages under
`/path/to/prefix/directory/share/man/man1`.
A typical choice for `/path/to/prefix/directory` would be `~/.local`.

### Alternative #1: With plug.kak

You can install **kak-spec** using the
[plug.kak](https://github.com/andreyorst/plug.kak) plugin manager by extending
your `kakrc` with:

```kak
plug "alexherbo2/prelude.kak"
plug "jbomanson/kak-spec" noload do %(
    make install PREFIX=/path/to/prefix/directory
)
```

Then start Kakoune and run `:plug-install`.

### Alternative #2: Manually

```sh
cd /path/to/plugins/directory
git clone --depth=1 https://github.com/alexherbo2/prelude.kak
git clone --depth=1 https://github.com/jbomanson/kak-spec
cd kak-spec && make install PREFIX=/path/to/prefix/directory
```

After the installation is done, the cloned directories should stay where they are.
This is important, because the installation process makes soft links to content inside the
`kak-spec` directory and `kak-spec` expects to find `prelude.kak` from a location next to it.

## Usage

### Writing tests

Tests are written in kakoune source files that call `require-module spec` and then use the
provided kakoune command **spec** to define tests.
Here is an example test file:
```kak
<%=
    File.read("example/selections.kak")
-%>
```

More examples can be found in the
[example](https://github.com/jbomanson/kak-spec/example) directory.

#### Kakoune Command Usage

<%=
  # Extract and format the docstring of the spec command.
  File.read("rc/spec.kak")[/define-command spec [^']*'\K[^']*/].
    gsub(/^(?=-\w)/, '- ').
    gsub(/<(\w+)>/, '_\1_').
    gsub(/(-([\w%()\[\]{}<>-]+))+|(?<!\S)[()\[\]{}<>](?!\S)|spec/, '**\0**').
    gsub(/^ *Example/, "  - Example")
-%>

### Running Tests: Command Line Usage

<%=
  # Extract and format the help text from the executable.
  File.read("lib/runner.sh")[/cat <<EOF\K.*?^(?=EOF)/m].
    gsub(/^(?=-\w)/, '- ').
    gsub(/<(\w+)>/, '_\1_').
    gsub(/(?<!\w)-([\w%()\[\]{}<>-]+)|kak-spec/, '**\0**')
-%>

## PROTIP: Rerunning tests as they change

**kak-spec** works well with file watcher programs such as
[entr](http://eradman.com/entrproject/) that rerun arbitrary commands as some files change.
For example, in a git project with test files in a directory hierarchy under `spec`, one could
run:
```sh
while true; do
  git ls-files | entr -cd kak-spec spec/**/*.kak
done
```
These commands would rerun kak-spec on *.kak files under `spec` whenever any file currently
tracked by git changes.
